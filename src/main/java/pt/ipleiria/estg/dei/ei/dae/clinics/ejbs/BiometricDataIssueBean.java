package pt.ipleiria.estg.dei.ei.dae.clinics.ejbs;

import pt.ipleiria.estg.dei.ei.dae.clinics.entities.BiometricDataIssue;
import pt.ipleiria.estg.dei.ei.dae.clinics.entities.BiometricDataType;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@Stateless
public class BiometricDataIssueBean {
    @PersistenceContext
    private EntityManager entityManager;

    /***
     * Creating a Biometric Data Issue based on a Biometric Data Type
     * @param name of the Biometric Data Issue ("Febre")
     * @param min value to be with this Issue (38)
     * @param max value to be with this Issue (45)
     * @param biometric_data_type @Id of Biometric_Data_Type (1:"Temperatura Corporal")
     * @return @Id generated by autoincrement
     *         -1 if not found Biometric_Data_Type
     *         -2 if min or max out of bouds for limits in Biometric_Data_Type
     */
    public long create(String name, int min, int max, long biometric_data_type){
        BiometricDataType biometricDataType = entityManager.find(BiometricDataType.class, biometric_data_type);
        if (biometricDataType != null){

            if (min < biometricDataType.getMin() || max > biometricDataType.getMax())
                return -2; //min or max out of bouds for limits in Biometric_Data_Type

            BiometricDataIssue newBiometricDataIssue = new BiometricDataIssue(name, min, max, biometricDataType);
            entityManager.persist(newBiometricDataIssue);
            entityManager.flush();
            return newBiometricDataIssue.getId();
        }
        return -1; //Not found Biometric_Data_Type with this id
    }

    public BiometricDataIssue delete(long id) {
        entityManager.remove(entityManager.find(BiometricDataIssue.class,id));
        return entityManager.find(BiometricDataIssue.class,id);
    }
}
